<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetXtensions.Common2</name>
    </assembly>
    <members>
        <member name="T:DotNetXtensions.AsyncPump">
            <summary>
            Provides a pump that supports running asynchronous methods on the current thread.
            
            From Stephen Toub, http://blogs.msdn.com/b/pfxteam/archive/2012/01/20/10259049.aspx.
            
            Referenced as influential to the AsyncHelpers code here:
            http://stackoverflow.com/questions/5095183/how-would-i-run-an-async-taskt-method-synchronously
            
            Discussion: http://stackoverflow.com/questions/26941901/task-continuation-was-not-scheduled-on-thread-pool-thread/26942338#26942338
            
            <code>
            static void Main() {
            	DemoAsync().Wait();
            }
            
            // becomes:
            
            static void Main()
            {
            	 AsyncPump.Run(async delegate {
            		  await DemoAsync();
            	 });
            }
            </code>
            </summary>
        </member>
        <member name="M:DotNetXtensions.AsyncPump.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the specified asynchronous function.
            </summary>
            <param name="func">The asynchronous function to execute.</param>
        </member>
        <member name="T:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext">
            <summary>
            Provides a SynchronizationContext that's single-threaded.
            </summary>
        </member>
        <member name="F:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.m_queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="F:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.m_thread">
            <summary>The processing thread.</summary>
        </member>
        <member name="M:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to the synchronization context.
            </summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>Runs an loop to process all queued work items.</summary>
        </member>
        <member name="M:DotNetXtensions.AsyncPump.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="F:DotNetXtensions.ConcurrentTasksQueueHandler`1.TaskRunnerDefaultSemCount">
            <summary>
            If a ConcurrentTasksRunner is not passed into one of the constructors
            for this type, a new one will be constructed with this semcount.
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksQueueHandler`1.EndTaskLoops">
            <summary>
            Setting to true will disable the continuously running while loops
            within this class (the two which are started by calling StartTasks)
            from running again. It will also set the TaskRunner instance to null.
            Any tasks that were already running or just starting
            up will not be affected though (i.e. there are no cancellations involved).
            </summary>
        </member>
        <member name="F:DotNetXtensions.ConcurrentTasksQueueHandler`1.NoExternalQueueToCheck">
            <summary>
            There are two sources which can provide items to the queue within this type:
            1) Through calls to <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.AddToQueue(`0[])"/>, and
            2) Through implementation of <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync"/>.
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksQueueHandler`1.Debug_AwaitTasksAtLoopEnd">
            <summary>
            For debug purposes, otherwise, this should not be done.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.#ctor(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="taskRunnerSemCount">The number of concurrent tasks to run. 
            This value is fed into the constructor of a <see cref="T:DotNetXtensions.ConcurrentTasksRunner"/>.</param>
            <param name="startTasksImmediately">True to immediately call <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.StartTasks"/> at end of constructor. </param>
            <param name="noExternalQueueToCheck">
            Sets the readonly field. If true, <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.__GetItemsFromExternalQueue_ContinuousLoop_Async"/> will never be run,
            and <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync"/> will never be called or used either.
            </param>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.#ctor(System.Boolean,DotNetXtensions.ConcurrentTasksRunner,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="startTasksImmediately">See overload.</param>
            <param name="tasksRunner">ConcurrentTasksRunner instance.</param>
            <param name="noExternalQueueToCheck">See overload.</param>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.StartTasks">
            <summary>
            This starts up two Tasks, one Task.Run that async awaits GetItemsFromExternalQueueAsync
            IF <see cref="F:DotNetXtensions.ConcurrentTasksQueueHandler`1.NoExternalQueueToCheck"/> is false, and the other that runs the internal 
            <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.__HandleItemsFromLocalQueue_ContinuousLoop_Async"/>.
            <para/>
            This should only be ran once! Calling it more than once would cause that many more loops to be running, so we internally
            disallow this and will throw an exception. To restart, create a new instance of your type.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemIdDisplay(`0)">
            <summary>
            Should return an identifying string representation for this item,
            which will be used when printing out that this item is being handled, etc.
            </summary>
            <param name="itm">Item</param>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.LogException(System.Exception,System.String)">
            <summary>
            Exception logger. The exception passed in will always not be the AggregateException.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync">
            <summary>
            This method is called when <see cref="F:DotNetXtensions.ConcurrentTasksQueueHandler`1.NoExternalQueueToCheck"/> is false (i.e. when there IS 
            an external queue or items source).
            In that case, as long as <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.StartTasks"/> has been called and has not been stopped,
            we will periodically call this type in order to get items from whatever the external source or
            queue is. In other words, we will be polling that external source, and this method once implemented 
            will provide those external items.
            <para/>
            Note that there is another way to add items to this type's internal queue, which is by calling 
            <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.AddToQueue(`0[])"/>. Even when there is an external queue however, you can use that method 
            in case of mocking this type to see how it runs.
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksQueueHandler`1.MockGetItemsFromExternalQueue">
            <summary>
            For mocking purposes, set this Func to non-null. It's logic will then replace 
            calls to <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync"/>, allowing mock items to be sent in 
            for test purposes. This is very useful as it allows one to by-pass the potentially difficult
            to test external queue. E.g. if an Azure queue is the external source, setting this will 
            allow you to test this without having to actually add and get items from that external 
            queue.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.AddToQueue(`0[])">
            <summary>
            Add items manually to the internal queue. See notes on <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync"/> 
            for more information or understanding.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.__HandleItemsFromLocalQueue_ContinuousLoop_Async">
            <summary>
            This function is started in <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.StartTasks"/> after which time it
            runs continuously. After each wait period in the loop (defined by <see cref="P:DotNetXtensions.ConcurrentTasksQueueHandler`1.DelayBetweenLocalQueueChecks"/>,
            typically no more than 1 second),
            the local queue which has had items dequeued to it has its items run through until the queue is empty.
            Then it waits again for the specified time before checking again.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.__GetItemsFromExternalQueue_ContinuousLoop_Async">
            <summary>
            The main function of this method is to dequeue items from an external queue or otherwise source,
            and to add them to our internal queue. This does not actually perform the work of handling those dequeued
            items, which is taken care of by the other major function in this type (internal function: <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.__HandleItemsFromLocalQueue_ContinuousLoop_Async"/> ).
            Once called, this continuously gets items from <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.GetItemsFromExternalQueueAsync"/> and
            adds any of those to the internal queue. Any time the internal queue has more than the max allowed number of 
            concurrent items to act on (see <see cref="P:DotNetXtensions.ConcurrentTasksQueueHandler`1.SemCount"/>), this cycle will wait (will keep looping but will
            only get items once there are less than max items already in local queue). The cycle herein Task.Delays
            between cycling according to <see cref="M:DotNetXtensions.ConcurrentTasksQueueHandler`1.WaitTimeTillNextExternalQueueCheck(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="T:DotNetXtensions.ConcurrentTasksRunner">
            <summary>
            Allows multiple (100s, 1000s, +) tasks to be instantiated and run 
            in a loop (etx) but while putting a throttled limit on how many can
            be started at once. This is quite simply done with a SemaphoreSlim
            object, which is really the star that makes this possible.
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksRunner.DisableSemaphore">
            <summary>
            For diagnostic purposes: Disabling causes things to run without 
            any throttling of tasks being started up, which is the whole 
            purpose of this type. So set this to true to see how things would have been
            otherwise, but this allows one to keep the exact same test code. 
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksRunner.CurrentSemCount">
            <summary>
            The CurrentCount of the internal SemaphoreSlim object
            ('the number of threads that will be allowed to enter the 
            SemaphoreSlim object').
            </summary>
        </member>
        <member name="P:DotNetXtensions.ConcurrentTasksRunner.Print">
            <summary>
            Set this Action in order to output diagnostic output of when 
            RunTask fires and completes new tasks. 
            string param: dianostic string to print.
            bool param: 'isComplete', false if starting task, true if task has just completed.
            </summary>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksRunner.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="concurrentTasksCount">
            Number of concurrent tasks that can be
            started up at once. Minimum is 1 (will be fixed if less than). This simply sets
            the internal SemaphoreSlim's initialCount value.
            </param>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksRunner.RunTask(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken},System.Int32,System.String,System.Action{System.String,System.Boolean})">
            <summary>
            Runs a new task (Task.Run) on the given function, but ensures that 
            not more than a maximum number of calls can be made to this function 
            before further calls are throttled. This is quite simply by using
            a SemaphoreSlim that is called (Wait-ed) at the start of this function,
            and released in a finally block within the task function, after the given function 
            was finished (or after it threw an exception). 
            <para />
            This method returns a Task, but it is not async (so don't await it,
            Task.Run that generated it already starts it). The reason for the return
            is if you need to wait for a collection of tasks to finish before moving on,
            just save all the tasks in a list and call Task.WaitAll on them at the end of the
            loop.
            <para/>
            NOTE: We currently only have this one method, but in future could
            easily have many overloads that coorespond to some of the overloads offered
            by Task.Run (e.g. allowing task cancellation tokens, etc).
            </summary>
            <param name="function">Function to run as a task (Task.Run)</param>
            <param name="i">An index number. This can be helpful in diagnostics, especially
            considering these calls are usually made within a loop).</param>
            <param name="id">An id that can be used for identifying this id in the 
            diagnostic output.</param>
            <param name="cancellationToken">
            A cancellation token that should be used to cancel the work (else leave null).</param>
            <param name="print">Print action which will override the instance Print if set.</param>
            <returns>Returns the Task generated by Task.Run.</returns>
        </member>
        <member name="M:DotNetXtensions.ConcurrentTasksRunner.RunTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken},System.Int32,System.String,System.Action{System.String,System.Boolean})">
            <summary>
            See overload.
            </summary>
        </member>
        <member name="T:DotNetXtensions.BiDirectionalDictionary`2">
            <summary>
            This nice solution was altered from http://stackoverflow.com/a/8105057/264031.
            </summary>
        </member>
        <member name="T:DotNetXtensions.Collections.BinarySearch`1">
            <summary>
            A class that performs binary chop searches on sorted sequences,
            with helpful functions like FindRange, which allows efficient 
            binary-search retrieval of values within a certain range of the sorted sequence.
            This class also allows searching on virtual sequences, as an actual array or
            list never needs to be sent in, which also gets around the framework restriction
            whose binary search functions only apply to arrays (see Array class).
            </summary>
            <typeparam name="T">The given type which either must implement IComparable&lt;T&gt;
            or else the Comparer func must be sent in.</typeparam>
        </member>
        <member name="F:DotNetXtensions.Collections.BinarySearch`1._compareTo">
            <summary>
            This is the main comparer but use compareTo private property for main 
            functionality instead, see notes below.</summary>
        </member>
        <member name="P:DotNetXtensions.Collections.BinarySearch`1.compareTo">
            <summary>
            If reverse is true returns a reversed result of the _compareTo comparer, 
            else returns _compareTo itself. Use this comparer for the main work herein,
            as it quite magically handles a reversing of the results if reverse is true
            (SO beautiful that this was all that was needed to handle reversed sequences!!! Literally
            this is IT, no other changes needed, simply reversing the comparer result 
            perfectly handles everything).
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1._reverseComparer1(`0,`0)">
            <summary>
            A reversed comparer that works by reversing the result of the _compareTo func.
            So if _compareTo generates -1, the return here will be 1, etc (0 is still 0).
            </summary>
            <param name="t1">First value to compare.</param>
            <param name="t2">Second value to compare.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.Init(System.Func{System.Int32,`0},System.Int32,System.Boolean,System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes (or reinitializes) the main settings for this BinarySearch instance. 
            This allows one to reuse this instance for sequences of the same type T, rather than
            having to allocate and set a new instance for every usage.
            The constructor is an indirection to this method.
            <para/>
            If type T does not implement IComparable&lt;T&gt;, you must send in a non-null comparer function.
            </summary>
            <param name="getItemAtIndex">Function for retrieving 
            items from the sorted sequence to search.</param>
            <param name="collectionLength">Length of items in the source collection 
            (only needed if for methods that need this value set).</param>
            <param name="reverse">True if the items source is sorted in reverse order.
            Internally, what this does is reverse the integer result of the comparer,
            which thankfully gerenates perfect results, without having to reimplement
            all the code (!!!).</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.#ctor">
            <summary>
            If calling this parameterless constructor, you will have to call Init before any other methods are called.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.#ctor(System.Func{System.Int32,`0},System.Int32,System.Boolean,System.Func{`0,`0,System.Int32})">
            <summary>
            See notes on Init which this overloaded constructor calls.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean,System.Func{`0,`0,System.Int32})">
            <summary>
            See notes on Init which this overloaded constructor calls.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.Find(`0,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Does a binary search for the given value, returning the found index, or if not found,
            returns the negative complement (+ 1 to the positive value).
            </summary>
            <param name="value">Value to search for.</param>
            <param name="index">Index to start the search at, must be less than the collection length.</param>
            <param name="count">If not null, is the count after index of range to search within the collection.
            Leave null to use CollectionLength (to search through to the collection's end, taking into account index).</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindSingleRangeLinearOnceFound(`0,System.Int32,System.Nullable{System.Int32})">
            <summary>
            [OBSOLETE] Well probably obsolete, to be replaced, we hope, by the new
            FindSingleRange methods and algorithms. However, the difference is this 
            performs a linear search once a found index is found, so for testing lets
            keep around for now.
            [Old notes]
            Gets the range of finds (if any). This is performed by calling Find, and then submitting that
            result to FindAllFromFound: (<c>FindAllFromFound(value, Find(value), index, count)</c>).
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindSingleRangeFromFoundLinear(`0,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            [OBSOLETE] Well probably obsolete, to be replaced, we hope, by the new
            FindSingleRange methods and algorithms. However, the difference is this 
            performs a linear search once a found index is found, so for testing lets
            keep around for now.
            [Old notes]
            Takes the result of Find and gets all (any) adjacent matches, forwards and backwards.
            At this time this is a primitive linear search, which will have a negative impact
            in cases where a sequence has the same (sorted) value occuring many times. In the future this
            could be made to search 1, 2, 4, 8, 16, binary multiple jumps forward until a non-match is 
            found in each direction, then working back, but ... that's a lot more complex.
            </summary>
            <param name="value">The original search value.</param>
            <param name="foundIdx">The found index from the binary search (returned potentially in this case
            from Find).</param>
            <param name="index">The index at which the search was started at.</param>
            <param name="count">The count after index which the search was limited to (if any).</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindRange(`0,`0,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Finds the range of matches that are greater or equal than low value and lesser or equal to
            high value within the sorted sequence by means of a binary search.
            Example: 
            <![CDATA[
            int arr = { 1, 1, 2, 5, 5, 5, 8, 8, 10, 12, 12 };
            IndexRangeWindow res = FindRange(3, 7); 
            //res: [low:3 high:7 count:5]
            ]]>
            </summary>
            <param name="lowValue">The low value to search (the highest in the sequence, 
            if sequence is reversed sort as set in constructor, this will be the higher value).</param>
            <param name="highValue">A value higher (further on) in the sequence.</param>
            <param name="index">The index at which to begin the search (0 by default).</param>
            <param name="length">The length of items to search after index (by default is set to the 
            sequence length which was set in the Init or constructor).</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindSingleRange(`0,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Finds the range of matches of a single value within the sorted sequence
            by means of a binary search, see overload for further details. 
            </summary>
            <param name="value">Value to search for. Both a FindLowRange and 
            FindHighRange search will be performed on it.</param>
            <param name="index">Index</param>
            <param name="length">Count from Index to search on</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindLowRange(`0,System.Int32,System.Int32)">
            <summary>
            Finds the lowest index in this range whose value is
            greater or equal to <paramref name="value"/> by means of a binary chop search. 
            Two extremity checks are performed first to see if 
            the value of <paramref name="low"/> is already >= to <paramref name="value"/> 
            (in which case <paramref name="low"/> is returned) or if value is already greater 
            than the value of <paramref name="high"/> (thus no match). If no match is found 
            returns -1.
            </summary>
            <param name="value">The value to search for.</param>
            <param name="low">The lowest index within sequence to search in.</param>
            <param name="high">The highest index within sequence to search in. If less than
            low will return -1.</param>
            <returns>The lowest index position within range that matched, -1 if no match.</returns>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.FindHighRange(`0,System.Int32,System.Int32)">
            <summary>
            Finds the highest index within the input low/high range
            where value is less than or equal to the input value.
            A check is made first on the low / high indexes before
            entering a the full binary search to see if the value is
            already out of range. If out of range returns -1.
            </summary>
            <param name="value">The value to search for.</param>
            <param name="low">The low index value.</param>
            <param name="high">The high index value.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearch`1.GetBinarySearchFailedLowHigh(System.Int32,System.Int32)">
            <summary>
            Obtains a BinarySearchFailedLowHigh struct to be used when 
            the binary search failed (i.e. returning a negative number), useful
            for understanding where the queried value would be in the sequence.
            This is simply a one-line indirection to the BinarySearchFailedLowHigh 
            constructor, put here for discoverability purpose.
            </summary>
            <param name="failedNegativeReturn">The negative int returned from a failed BinarySearch find.</param>
            <param name="sequenceLength">The length of the searched sequence.</param>
        </member>
        <member name="T:DotNetXtensions.Collections.BinarySearchFailedLowHigh">
            <summary>
            A struct that allows the result of a failed binary search 
            (such as is produced by .NET's Array.BinarySearch) to be 
            easily handled, specifically by indicating the low and high 
            bounds (never more than one apart, but equivalent to each other
            at the sequence boundaries) where the binary search's queried value index
            would be expected. There are some unexpected difficulties in 
            trying to make use of the failed BinarySearch value, which 
            this struct simplifies.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Collections.BinarySearchFailedLowHigh.Low">
            <summary>
            The low index which, when OnEdgeLowHighAreSame == false, 
            will *always* be lesser than the originally sought value item.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Collections.BinarySearchFailedLowHigh.High">
            <summary>
            The high index which, when OnEdgeLowHighAreSame == false, 
            will *always* be greater than the originally sought value item.
            </summary>		
        </member>
        <member name="F:DotNetXtensions.Collections.BinarySearchFailedLowHigh.IsValid">
            <summary>
            Results in *false* if constructor's failedNegativeReturn input param
            corresponds to an 
            index completely out of bounds when judged by constructor's 
            sequenceLength, or if either of these values were simply faulty
            (e.g. if failedNegativeReturn is not a negative number, which would
            indicate the search was not a failure).
            <para />
            One must always check this value is true before using the resulting 
            BinarySearchFailedLowHigh value.
            </summary>
        </member>
        <member name="P:DotNetXtensions.Collections.BinarySearchFailedLowHigh.OnEdgeLowHighAreSame">
            <summary>
            LowIndex == HighIndex (are equivalent) when the value 
            sought after was lesser than the first item in the sequence
            (== '-1' failedNegativeReturn) or greater (**by only one**)
            than the last item in the sequence. 
            <para />
            Thus WHEN TRUE, the sought after value would be expected to 
            be found either below the first item in the sequence 
            (in which case both LowIndex and HighIndex == 0) or after 
            the last (both equal sequenceLength - 1).
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearchFailedLowHigh.#ctor(System.Int32,System.Int32)">
            <summary>
            BinarySearchFailedLowHigh constructor.
            </summary>
            <param name="failedNegativeReturn">The binary search's negative 
            number result.</param>
            <param name="sequenceLength">The length of the source sequence 
            is needed for when the value is at the boundaries of the sequence, 
            i.e. below the lowest or above the highest.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearchFailedLowHigh.ToString">
            <summary>
            ToString overriden for easy viewing in debugging.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearchX.BinarySearchFindRange``1(System.Collections.Generic.IList{``0},``0,``0,System.Boolean,System.Int32,System.Nullable{System.Int32},System.Func{``0,``0,System.Int32})">
            <summary>
            Finds the range of matches that are greater or equal than low value and lesser or equal to
            high value within the sorted sequence by means of a binary search. 
            See BinarySearch[T].FindRange for further details. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.BinarySearchX.BinarySearchFindRange``1(System.Collections.Generic.IList{``0},``0,System.Boolean,System.Int32,System.Nullable{System.Int32},System.Func{``0,``0,System.Int32})">
            <summary>
            Finds the range of matches of a single value within the sorted sequence
            by means of a binary search, see BinarySearch[T].FindSingleRange for further details. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.IndexRangeWindow.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents the high / low range result of a BinarySearchV2.FindWithinRange search.
            If none were in range, Count will be 0 and Low will (always?) be one higher than
            High.
            </summary>
            <param name="low">The low index. If none found, will be one greater than high, but Count will be set to 0.</param>
            <param name="high">The high index.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.IndexRangeWindow.GetItems``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the range of items specified in this range 
            from the input source IList.
            </summary>
            <param name="list">The source list.</param>
        </member>
        <member name="T:DotNetXtensions.Collections.FixedList`1">
            <summary>
            Unlike Lists, arrays (Array, T[]), which are a fixed size, can only be constructed
            by indexing into them. They cannot be built up in a sequential
            manner with convenient and clean methods like "array.Add(T)" or "array.AddRange(T[])"
            which would require Array to internally track the 'position' at which 
            items have been added. Also, Arrays of course do not have convenient
            AddRange methods. You would have to copy all elements from one array to the 
            other, while also always specifying the index position for each. 
            <para/>
            Sometimes, however, it would be greatly advantageous to have the convenience
            and greater cleanness in code of being able to build up an array of a 
            fixed size (not a dynamically changing size as with List) 
            with Add and AddRange methods, all while expecting it to remain of a fixed-size
            (with an OutOfRangeException thrown if you try to add beyond its size).
            <para/>
            Instead of multiplying many words, the following demonstration demonstrates 
            the usefulness of FixedList and what it offers:
            <example><code><![CDATA[
            static void DemonstrateFixedList(Stream stream)
            { 
            	int bufferSize = 17;
            	FixedList<byte> buffer = new FixedList<byte>(bufferSize);
            
            	// the values to add here (a byte, two ints, and a long) are phony
            	// for this demo, as they are hardcoded. Expectation in real scenario
            	// is these are being gotten somehow in a real example
            
            	for (int i = 0; i < 100; i++) // in real scenario, loop iterations determined otherwise of course
            	{
            		buffer.Clear(true); // FixedList.Clear(bool justResetPositionToZero) 
            		// means only ONE internal byte[] ever made, no repeated byte[] instantiations
            	
            		byte b = 33;
            		buffer.Add(b);
            		// many lines later...
            
            		// AddRange! regular byte[] would require iteration to copy
            		// one to the other, or a call to Array.Copy every time, FixedList
            		// takes care of all of that, and just as performantly
            		int i1 = 3898823;
            		buffer.AddRange(BitConverter.GetBytes(i1));
            		// many lines later...
            	
            		int i2 = 89719;
            		buffer.AddRange(BitConverter.GetBytes(i2));
            		// many lines later...
            	
            		long l1 = 897521487454;
            		buffer.AddRange(BitConverter.GetBytes(l1));
            	
            		// buffer has now had exactly 17 bytes added to it, write directly to stream
            		stream.Write(buffer.ToArray(true), 0, bufferSize);
            	}
            	
            	// On FixedList.ToArray(bool returnInternalArrayIfFull):
            	// This returns the internal array (when true is specified) and when 
            	// the FixedList is full, so that NO COPY needs be made, 
            	// giving us the exact performance if we had built up a regular byte[] buffer
            	// but this way, the code is easier and cleaner, as FixedList
            	// worries about the current index add position, and as AddRange handles
            	// (just as performantly as you could have) adding of ranges
            }
            ]]></code></example>
            </summary>
            <typeparam name="T">Type, not constraints.</typeparam>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="arraySize">Size of FixedList.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.IndexOf(`0)">
            <summary>
            Index of item.
            </summary>
            <param name="item">Item to find.</param>
            <returns>Found index or -1.</returns>
        </member>
        <member name="P:DotNetXtensions.Collections.FixedList`1.Item(System.Int32)">
            <summary>
            Gets item at index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.ToArray(System.Boolean)">
            <summary>
            Returns all items in the FixedList.
            If returnInternalArrayIfFull is true and the internal
            array is full (with pos == FixedList.Length), 
            the actual internal array is returned,
            not a new copy of it. In LINQ and functional programming
            principles, a new copy would be expected, but the whole
            point of FixedList is to act highly performant
            as a buffer that is called repeatedly without having
            to instantiate new array objects every iteration. The
            key point is that we want FixedSizeArrayList to act 
            exactly like a regular array, but with the convenience
            and code simplified relief of being able to use 
            Add and AddRange (which for us is done by tracking a 
            current add position, equivalent to List's Count).
            </summary>
            <returns>Returns the internal array whole sale, not
            copying it for high efficiency.</returns>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.ToArray">
            <summary>
            Returns a copy of all items in the FixedList.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.Add(`0)">
            <summary>
            Adds item to List. If Count is already full, exception
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.AddRange(`0[])">
            <summary>
            Adds the range.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="P:DotNetXtensions.Collections.FixedList`1.IsFull">
            <summary>
            True if FixedList is filled capacity.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.Clear">
            <summary>
            Clears the items. Actually replaces
            internal array.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.Clear(System.Boolean)">
            <summary>
            For our unique purposes, this was largely the point of 
            having FixedSizeArrayList: having <paramref name="justRestPositionToZero"/>
            allows us to not allocate a new array EVERY time, thus
            making for much more efficiency when the array is being 
            used as a repetively used buffer filled up to len thousands
            to millions of times repetitively.
            </summary>
            <param name="justRestPositionToZero">True to simply
            reset the position to zero, meaning future Adds
            will be added starting at position 0 in the internal
            array. This means that all values currently in array
            *will remain* after calling Clear(true), so the expectation
            is that the whole array will be filled first thus 
            overwriting previously written values. But 
            just as with a regular array, which is always
            fixed size, *the expectation is always that it will
            be entirely written to the last position*, so this is 
            a reasonable expectation.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.Contains(`0)">
            <summary>
            Indicates if item is contained in List.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items in List (starting at 0) into array
            at arrayIndex.
            </summary>
            <param name="array">Array to copy into.</param>
            <param name="arrayIndex">Index in array to start copying
            into it at.</param>
        </member>
        <member name="P:DotNetXtensions.Collections.FixedList`1.Count">
            <summary>
            Count of items in List.
            </summary>
        </member>
        <member name="P:DotNetXtensions.Collections.FixedList`1.IsReadOnly">
            <summary>
            False.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.FixedList`1.GetEnumerator">
            <summary>
            Gets list enumerator.
            </summary>
        </member>
        <member name="T:DotNetXtensions.Collections.OrderedDictionary`2">
            <summary>
            Represents a collection of key/value pairs that are accessible by the key or index.
            Intended to be used as a replacement for the weakly typed 
            <see cref="T:System.Collections.Specialized.OrderedDictionary"/> collection.
            <para/>
            https://github.com/johndkane/GenericOrderedDictionary pulled on Sept 2013, committ: 6fc44a31861da5f61d5ceeff43d0b31e13228edb
            </summary>
            <typeparam name="TKey">Type of the keys.</typeparam>
            <typeparam name="TValue">Type of the values.</typeparam>
            <remarks>
            <para>
            This implementation is compatible with .NET 2.0 and higher. 
            </para>
            <para>
            Provides a workaround to a missing generic implementation in
            the .NET Framework as of v4.5. 
            </para>
            <para>
            Internally this data structure is made up of one Dictionary(Of K, V) instance for random 
            access operations and one List(KeyValuePair(Of K, Of V) instance for ordered operations. 
            This implementation delegates its calls to the internal dictionary for unordered 
            operations and to the list for ordered operations. 
            The two internal data structures are kept in sync with shared KeyValuePairs.
            </para>
            </remarks>
        </member>
        <member name="F:DotNetXtensions.Collections.OrderedDictionary`2.internalList">
            <summary>
            The internal List for ordered access to KVPs. 
            </summary>
        </member>
        <member name="F:DotNetXtensions.Collections.OrderedDictionary`2.internalDictionary">
            <summary>
            The internal dictionary for random access to KVPs. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.TryGetPairFromListByKey(`0,System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32@)">
            <summary>
            Utility method to retrieve the first matching KVP by key name. 
            </summary>
            <param name="key">The sought key.</param>
            <param name="valueFound">The first KVP found.</param>
            <param name="indexFound"></param>
            <returns>true if the key was found otherwise false </returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.GetOrderedPairs">
            <summary>
            Returns the ordered set of KVPs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.GetOrderedKeys">
            <summary>
            Returns the ordered set of keys. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.GetOrderedValues">
            <summary>
            Returns the ordered set of values. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.ListCount">
            <summary>
            Gets the count of the internal list. 
            </summary>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.DictionaryCount">
            <summary>
            Gets the count of the internal dictionary. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Tells if the collection contains the specified key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.Keys">
            <summary>
            Returns the unordered set of keys. 
            To get an ordered set of keys
            use the <see cref="M:DotNetXtensions.Collections.OrderedDictionary`2.GetOrderedKeys"/> method instead.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the item with the specified key from the collection. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve the value of the given key. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.Values">
            <summary>
            Returns the unordered set of values. 
            To get an ordered set of values
            use the <see cref="M:DotNetXtensions.Collections.OrderedDictionary`2.GetOrderedValues"/> method instead.
            </summary>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the given key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Since the dictionary indexer cannot be set well when the key
            is an int, bec it conflicts with List's indexer, we provide 
            this.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Appends an item to the collection. 
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Clear">
            <summary>
            Clears all items from the collection. It will have a zero count. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Tells if the collection contains the given item. 
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies this collection to the given array. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.Count">
            <summary>
            Tells how many items are in the collection. 
            </summary>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.IsReadOnly">
            <summary>
            Tells if the collection is read only. 
            </summary>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the given item from the collection. 
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator instance over the ordered set of items in this collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator instance over the ordered set of items in this collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns the index position of the given item in this collection. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Inserts the given item at the specified position in the collection. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:DotNetXtensions.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the collection. 
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:DotNetXtensions.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index position in the collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetXtensions.DropOffStack`1">
            <summary>
            A Stack that is of a static capacity, which does the pushing and popping
            by internally cycling through an array with a 'top' indexer. So what this
            means is if you set the capacity to 100 and reach 100, upon pushing 
            the next one, the item added 100 ago will be dropped off.
            <para />
            The capacity one must set in the constructor is the size that will be 
            set at the start internally, it does not dynamically increase in size up to that value,
            so if the capacity is 1 million, be aware that that instantiates an array
            internally of size 1 million. The whole implementation depends on this.
            However, if one was wanting items to drop off at a certain point,
            they already were willing to have a data structure that large in memory
            (of course the array until filled will simply be null items, i.e. simply empty 
            pointers).
            <para />
            Inspired from the following sources: 
            http://stackoverflow.com/a/384097/264031 and 
            http://courses.cs.vt.edu/~cs2704/spring04/projects/DropOutStack.pdf.
            </summary>
            <typeparam name="T">Type.</typeparam>
        </member>
        <member name="T:DotNetXtensions.DropOffStackConcurrent`1">
            <summary>
            A concurrent version of DropOffStack, see that version for more description,
            this one is kept in sync with that code base. 
            Any activity that changes or accesses
            state that is dynamic acquires a lock first making this thread safe. 
            </summary>
        </member>
        <member name="T:DotNetXtensions.PriorityQueue`1">
            <summary>
            PriorityQueue provides a stack-like interface, except that objects
            "pushed" in arbitrary order are "popped" in order of priority, i.e., 
            from least to greatest as defined by the specified comparer.
            </summary>
            <remarks>
            Push and Pop are each O(log N). Pushing N objects and them popping
            them all is equivalent to performing a heap sort and is O(N log N).
            </remarks>
        </member>
        <member name="P:DotNetXtensions.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the priority queue.
            </summary>
        </member>
        <member name="P:DotNetXtensions.PriorityQueue`1.Top">
            <summary>
            Gets the first or topmost object in the priority queue, which is the
            object with the minimum value.
            </summary>
        </member>
        <member name="M:DotNetXtensions.PriorityQueue`1.Push(`0)">
            <summary>
            Adds an object to the priority queue.
            </summary>
        </member>
        <member name="M:DotNetXtensions.PriorityQueue`1.Pop">
            <summary>
            Removes the first node (i.e., the logical root) from the heap.
            </summary>
            <remarks>
            Code contributed by Kevin Gosse, https://stackoverflow.com/a/44222169/264031
            </remarks>
        </member>
        <member name="M:DotNetXtensions.PriorityQueue`1.HeapParent(System.Int32)">
            <summary>
            Calculate the parent node index given a child node's index, taking advantage
            of the "shape" property.
            </summary>
        </member>
        <member name="M:DotNetXtensions.PriorityQueue`1.HeapLeftChild(System.Int32)">
            <summary>
            Calculate the left child's index given the parent's index, taking advantage of
            the "shape" property. If there is no left child, the return value is >= _count.
            </summary>
        </member>
        <member name="M:DotNetXtensions.PriorityQueue`1.HeapRightFromLeft(System.Int32)">
            <summary>
            Calculate the right child's index from the left child's index, taking advantage
            of the "shape" property (i.e., sibling nodes are always adjacent). If there is
            no right child, the return value >= _count.
            </summary>
        </member>
        <member name="T:DotNetXtensions.DebugWriter">
            <summary>
            Overrides the many Write and WriteLine methods of StringWriter,
            writing these then first to Debug.Write / Debug.WriteLine, and then
            also to base as well (base.Write / base.WriteLine). One can change 
            where this writes to though by simply overriding: 
            <code>_Write(string value)</code> and <code>_WriteLine(string value)</code>. 
            All methods herein redirect to these two methods.
            <para />
            Inspired by: http://stackoverflow.com/a/1583569/264031
            </summary>
        </member>
        <member name="P:DotNetXtensions.DebugWriter.AlsoWriteToOriginalConsoleOut">
            <summary>
            If Console.Out has been set to this or to something else,
            when this is true and when OriginalConsoleOut is not null,
            output will be written in addition to OriginalConsoleOut. 
            </summary>
        </member>
        <member name="T:DotNetXtensions.PasswordStrengthEvaluator">
            <summary>
            Type that helps determine the strength of a password.
            Inspiration and initial code base (strongly modified) from Tom Gullen on Stack Overflow
            (https://stackoverflow.com/a/18108837/264031).
            </summary>
        </member>
        <member name="P:DotNetXtensions.PasswordStrengthEvaluator.TotalConsecutiveSpansCount">
            <summary>
            For strength validation, setting this property may not be needed if you already
            are setting the main counts (<see cref="P:DotNetXtensions.PasswordStrengthEvaluator.LowercaseCount"/> etc), as those will guarantee
            a certain number of consecutive char type spans.
            </summary>
        </member>
        <member name="T:DotNetXtensions.Reflection.FastInvoke">
            <summary>
            From: http://flurfunk.sdx-ag.de/2012/05/c-performance-bei-der-befullungmapping.html
            Google translate: "If you like it I would be happy to hear about it. Send an email to "matthias.malsy" @ "sdx-ag.de"."
            </summary>
        </member>
        <member name="M:DotNetXtensions.Reflection.FastInvoke.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            http://stackoverflow.com/a/491486/264031
            </summary>
        </member>
        <member name="T:DotNetXtensions.Reflection.FastPropertyInfo">
            <summary>
            Wraps a PropertyInfo object while caching some key values from it 
            for fastest performance. This is mostly to be used as a base class
            for child FastPropertyInfo types, namely those which provide a cached
            getter and setter on this property.
            </summary>
        </member>
        <member name="P:DotNetXtensions.Reflection.FastPropertyInfo.DeclaringType">
            <summary>
            The source PropertyInfo DeclaringType (converts from Nullable if is a nullable type).
            This is *cached* on instantiation.
            (<code>DeclaringType = pinfo.DeclaringType.GetUnderlyingTypeOrSelfIfNullable();</code>)
            </summary>
        </member>
        <member name="P:DotNetXtensions.Reflection.FastPropertyInfo.PropertyType">
            <summary>
            The source PropertyInfo type (converts from Nullable if is a nullable type).
            This is *cached* on instantiation.
            (<code>PropertyType = pinfo.PropertyType.GetUnderlyingTypeOrSelfIfNullable();</code>)
            </summary>
        </member>
        <member name="P:DotNetXtensions.Reflection.FastPropertyInfo.Name">
            <summary>
            The source Property name (cached to ensure as fast as possible).
            </summary>
        </member>
        <member name="P:DotNetXtensions.Reflection.FastPropertyInfo.PropInfo">
            <summary>
            The source PropertyInfo which this FastPropertyInfo wraps.
            </summary>
        </member>
        <member name="T:DotNetXtensions.Reflection.FastPropertyInfoTyped`2">
            <summary>
            This is a strongly typed version which allows the getter and setter to receive/return
            a strongly typed type instead of object.
            </summary>
            <typeparam name="TDeclaringType">The type of the class that declares this member.</typeparam>
            <typeparam name="TPropertyType">The property type.</typeparam>
        </member>
        <member name="M:DotNetXtensions.Reflection.FastPropertyInfoGroup`3.#ctor(System.Func{DotNetXtensions.Reflection.FastPropertyInfo{`0,`1},`2})">
            <summary>
            Constructor.
            </summary>
            <param name="getId">Func to get the id from a property. 
            Leave null to not have the dictionary set.</param>
        </member>
        <member name="T:DotNetXtensions.GridOutputBuilder">
            <summary>
            Type that allows one to write output in either fixed columns or
            in auto-figured width columns. This builder allows one to build up
            the ouput that will be fed into one of the two main static functions,
            which makes it much more user-friendly.
            
            The internal static function PadElementsInLines was taken mostly from:
            http://pastebin.com/CVkavHgy
            which itself was admittedly "inspired from": 
            http://stackoverflow.com/a/27399595/264031
            
            <para/>
            Example:
            <![CDATA[
            // Auto-width output (notice 0 or 1 arguments in constructor [padding size, default: 1])
            var b = new PaddedOutputBuilder(padding: 5)
            			.Add("SomeReallyCoolUrl", "http://google.com/", 2323)
            			.Add("ShortyUrl",   "http://dot.net/", 323923829);
            
            string res = b.ToString().Print();
            
            // Fixed width output per column. 
            var bFixed = new PaddedOutputBuilder(20, 30, 12) // args are for: params int[] paddingPerColumn
            			.Add("SomeReallyCoolUrl", "http://google.com/", 2323)
            			.Add("ShortyUrl",   "http://dot.net/", 323923829);
            
            string res2 = bFixed.ToString().Print();
            
            /*
            OUTPUT (Auto Width):
            SomeReallyCoolUrl     http://google.com/     2323 
            ShortyUrl             http://dot.net/        323923829
            
            OUTPUT (Fixed Column Width):
            SomeReallyCoolUrl   http://google.com/            2323        
            ShortyUrl           http://dot.net/               323923829   
            */
            ]]>
            </summary>
        </member>
        <member name="M:DotNetXtensions.GridOutputBuilder.Clear">
            <summary>
            Effeciently clears the builder so it can be reused. The number of columns
            goes back to not set (so you can change the column count with the first Add after calling this).
            The only expensive operation is calling lines.Clear() on the internal List of string.
            </summary>
        </member>
        <member name="M:DotNetXtensions.GridOutputBuilder.ToGridOutputAuto(System.Int32,System.Collections.Generic.List{System.String[]})">
            <summary>
            Converts the input List of string arrays - where the outer List represents lines, and the inner 
            collection represents individual grid items) to a equal columned grid output string. 
            Each item in each line will be padded with the input padding size. Each array 
            must contain the same number of elements (i.e. grid items - they CAN be null or empty, but need to all
            be of the same size).
            <param name="lines">A list of string arrays, where each array in the list represents a row in the output grid.</param>
            <param name="padding">Additional padding between each element (default = 1)</param>
            </summary>
        </member>
        <member name="M:DotNetXtensions.GridOutputBuilder.ToString">
            <summary>
            Outputs this builder instance to a string based on <see cref="P:DotNetXtensions.GridOutputBuilder.IsFixedColumnSize"/>.
            If so, as a fixed column output, else as an auto figured column width size.
            </summary>
        </member>
        <member name="T:DotNetXtensions.GuidTimeStamp">
            <summary>
            Serializes and deserializes a datetime + guid + long number into and back
            from bytes of precisely 32 bytes long, which has many useful applications.
            </summary>
        </member>
        <member name="T:DotNetXtensions.ValueWrapper`1">
            <summary>
            Type that simply wraps a value (struct) type, enabling the value to be passed by reference.
            <para />
            Source adapted from solutions here: http://stackoverflow.com/questions/1434840/c-copy-one-bool-to-another-by-ref-not-val
            </summary>
        </member>
        <member name="T:DotNetXtensions.XMLLinq">
            <summary>
            Contains Linq to Xml extension methods.
            </summary>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.At(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Filters the collection of elements, returning only those elements that
            have an attribute of the given name.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="name">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.At(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.String)">
            <summary>
            Filters the collection of elements, returning only those elements that
            have an attribute of the given name and value.<para/><para/>
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="name">The name of the attribute to match.</param>
            <param name="value">The value of the specified attribute</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.AttributeNames(System.Xml.Linq.XElement)">
            <summary>
            Gets a collection of the names of the attributes in this element.<para/><para/>
            </summary>
            <param name="elem">This element.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Depth(System.Xml.Linq.XNode)">
            <summary>
            Gets the depth of this node within its cooresponding XElement or XDocument.
            Zero (0) indicates it is the root.
            </summary>
            <param name="node">This node.</param>
            <returns>The depth of this node.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.GetStartElement(System.Xml.Linq.XElement)">
            <summary>
            Returns a new XElement which is a duplicate of this element's start element (i.e. its opening tag).
            It will have no content so it will be a closed element.
            </summary>
            <param name="elem">This element.</param>
            <returns>A new XElement which is a duplicate of this element's start element.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.InnerXml(System.Xml.Linq.XElement)">
            <summary>
            Returns the inner-XML content of this element as a string.
            </summary>
            <param name="elem">This element.</param>
            <returns>The Inner-XML content of this element.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasLineInfo(System.Xml.Linq.XElement)">
            <summary>
            Indicates whether line information can be obtained from this element.
            </summary>
            <param name="elem">This element.</param>
            <returns>A value indicating if line information can be obtained.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets the current line-number of this element.
            <para /> <para />
            In typical scenarios, settings such as LoadOptions.SetLineInfo will need to have
            been specified -- if not, the line number will simply return zero (0).
            </summary>
            <param name="elem">This element.</param>
            <returns>The line-number.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LinePosition(System.Xml.Linq.XElement)">
            <summary>
            Gets the current line-position of this element.
            <para /> <para />
            In typical scenarios, settings such as LoadOptions.PreserveWhitespace and
            LoadOptions.SetLineInfo will need to have been specified -- if not, the line postion
            will simply return zero (0).
            </summary>
            <param name="elem">This element.</param>
            <returns>The line-postion.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Element(System.Xml.Linq.XElement)">
            <summary>
            Returns the first child element of this element.
            </summary>
            <param name="elem">This XElement.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Element(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns the first XElement of the child elements of this element that matches
            the specified attribute name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Element(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns the first XElement of the child elements of these elements that matches
            the specified attribute name.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Element(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns the first XElement of the child elements of this element that matches
            the specified attribute name and value.<para/><para/>
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Element(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns the first XElement of the child elements of these elements that matches
            the specified attribute name and value.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Xml.Linq.XElement)">
            <summary>
            Returns the first descendant element of this element.
            </summary>
            <param name="elem">This XElement.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns the first descendant element with the specified name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the descendant element to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns the first XElement of the descendant elements of this element that matches
            the specified attribute name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns the first XElement of the descendant elements of these elements that matches
            the specified attribute name.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns the first XElement of the descendant elements of this element that matches
            the specified attribute name and value.<para/><para/>
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute (may be NULL).</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendant(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns the first XElement of the descendant elements of these elements that matches
            the specified attribute name and value.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute (may be NULL).</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Elements(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns a filtered collection of the child elements of this element, in document order.
            Only XElements that match the specified element name and attribute name
            are included in the collection.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Elements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns a filtered collection of the child elements of these elements, in document order.
            Only XElements that match the specified element and attribute names are included in the collection.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Elements(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a filtered collection of the child elements of this element, in document order.
            Only XElements that match the specified element name and attribute name and value
            are included in the collection.<para/><para/>
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Elements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a filtered collection of the child elements of these elements, in document order.
            Only XElements that match the specified element name and attribute name and value
            are included in the collection.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendants(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns a filtered collection of the decendant elements of this element, in document order.
            Only XElements that match the specified element and attribute names are included in the collection.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendants(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a filtered collection of the descendant elements of these elements, in document order.
            Only XElements that match the specified element and attribute names are included in the collection.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendants(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a filtered collection of the decendant elements of this element, in document order.
            Only XElements that match the specified element name and attribute name and value
            are included in the collection.<para/><para/>
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute (may be NULL).</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.Descendants(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns a filtered collection of the descendant elements of these elements, in document order.
            Only XElements that match the specified element name and attribute name and value
            are included in the collection.
            </summary>
            <param name="elems">This IEnumerable of type XElement.</param>
            <param name="elemName">The name of the element to match, or NULL.</param>
            <param name="attrName">The name of the attribute to match.</param>
            <param name="attrValue">The value of the specified attribute (may be NULL).</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LastElement(System.Xml.Linq.XElement)">
            <summary>
            Gets the last child element of this element.
            </summary>
            <param name="elem">This XElement.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LastElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the last child element of this element that matches the specified
            element name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name that the retrieved element must match.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LastElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets the last child element of this element that matches the
            specified  element name (if not null) and that has an attribute of the specified name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name that the retrieved element must match, or NULL.</param>
            <param name="attrName">The name of the attribute that the retrieved element must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.LastElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets the last child element of this element that matches the
            specified element name (if not null) and that has an attribute of the specified name and value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name that the retrieved element must match, or NULL.</param>
            <param name="attrName">The name of the attribute that the retrieved element must contain.</param>
            <param name="attrValue">The value that the attribute must have.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Indicates whether or not this element has an attribute with the specified name.
            </summary>
            <param name="elem">This element.</param>
            <param name="attrName">The name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Indicates whether or not this element has an attribute with the specified name
            and value.
            </summary>
            <param name="elem">This element.</param>
            <param name="attrName">The name of the attribute.</param>
            <param name="attrValue">The value of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Determines if this element contains a child element with the given name.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Determines if this element contains a child element with the given name and attribute.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Determines if this element contains a child element with the given name and attribute.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name.</param>
            <param name="attrValue">The child element's attribute value.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String,System.Boolean)">
            <summary>
            Determines if this element contains a child element with the given name and (optionally)
            an attribute with the specified name and value.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name, or
            NULL if <i>nullableAttributeParams</i> is true. If null, the attribute will be ignored.</param>
            <param name="attrValue">The child element's attribute value, or
            NULL if <i>nullableAttributeParams</i> is true. If null, attrName must also be null.</param>
            <param name="nullableAttributeParams">If true, attrName, or attrName and attrValue may be null,
            which will be interpreted as a request to ignore (i.e. to not test off of) that value.  An ArgumentNullException
            is thrown if attrValue is not null but attrName is null. This parameter is often useful when the element only
            sometimes needs to be tested on one of its attribute values.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasDescendant(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Determines if this element contains a descendant element with the given name.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasDescendant(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Determines if this element contains a descendant element with the given name and attribute.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasDescendant(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Determines if this element contains a descendant element with the given name and attribute.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name.</param>
            <param name="attrValue">The child element's attribute value.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasDescendant(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String,System.Boolean)">
            <summary>
            Determines if this element contains a descendant element with the given name and (optionally)
            an attribute with the specified name and value.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The child element's name, or NULL.</param>
            <param name="attrName">The child element's attribute name, or
            NULL if <i>nullableAttributeParams</i> is true. If null, the attribute will be ignored.</param>
            <param name="attrValue">The child element's attribute value, or
            NULL if <i>nullableAttributeParams</i> is true. If null, attrName must also be null.</param>
            <param name="nullableAttributeParams">If true, attrName, or attrName and attrValue may be null,
            which will be interpreted as a request to ignore (i.e. to not test off of) that value.  An ArgumentNullException
            is thrown if attrValue is not null but attrName is null. This parameter is often useful when the element only
            sometimes needs to be tested on one of its attribute values.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasThisTagSignature(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Determines if this element has the specified name and an attribute with the specified name.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The name this XElement must have.</param>
            <param name="attrName">The name of the attribute this element must have.</param>
            <returns>True if the signature matches, else false.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasThisTagSignature(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Determines if this element has the specified name and an attribute with the specified name and value.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The name this XElement must have.</param>
            <param name="attrName">The name of the attribute this element must have.</param>
            <param name="attrValue">The value that the specified attribute must have.</param>
            <returns>True if the signature matches, else false.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasThisTagSignature(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String,System.Boolean)">
            <summary>
            Determines if this element has the specified name and (optionally) an attribute with the specified
            name and value.
            </summary>
            <param name="elem">This element.</param>
            <param name="elemName">The name this XElement must have.</param>
            <param name="attrName">The name of the attribute this element must have, or
            NULL if <i>nullableAttributeParams</i> is true. If null, the attribute will be ignored.</param>
            <param name="attrValue">The value that the specified attribute must have, or
            NULL if <i>nullableAttributeParams</i> is true. If null, attrName must also be null.</param>
            <param name="nullableAttributeParams">If true, attrName, or attrName and attrValue may be null,
            which will be interpreted as a request to ignore (i.e. to not test off of) that value.  An ArgumentNullException
            is thrown if attrValue is not null but attrName is null. This parameter is often useful when the element only
            sometimes needs to be tested on one of its attribute values.</param>
            <returns>True if the signature matches, else false.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.NextElement(System.Xml.Linq.XElement)">
            <summary>
            Gets this element's next sibling element.
            </summary>
            <param name="elem">This XElement.</param>
            <returns>The next sibling element.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.NextElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets this element's next sibling element which matches the specified element name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the next element to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.NextElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets this element's next sibling element which has the specified element name
            (unless null) and that has an attribute of the specified value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the next element to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the next element must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.NextElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets this element's next sibling element which has the specified element name
            (unless null) and that has an attribute of the specified name and value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the next element to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the next element must contain.</param>
            <param name="attrValue">The value of the attribute that the next element must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.PreviousElement(System.Xml.Linq.XElement)">
            <summary>
            Gets this element's previous sibling element.
            </summary>
            <param name="elem">This XElement.</param>
            <returns>The previous sibling element.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.PreviousElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets this element's previous sibling element which matches the specified element name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the next element to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.PreviousElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets this element's previous sibling element which has the specified element name
            (unless null) and that has an attribute of the specified value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the previous element to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the previous element must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.PreviousElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets this element's previous sibling element which has the specified element name
            (unless null) and that has an attribute of the specified name and value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The name of the previous element to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the previous element must contain.</param>
            <param name="attrValue">The value of the attribute that the previous element must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementsAfterSelf(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets this element's next sibling elements which match the specified element name
            (unless null) and that have an attribute of the specified name.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the next elements to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the next elements must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementsAfterSelf(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets this element's next sibling elements which match the specified element name
            (unless null) and that have an attribute of the specified name and value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the next elements to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the next elements must contain.</param>
            <param name="attrValue">The value of the attribute that the next elements must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementsBeforeSelf(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Gets this element's previous sibling elements which match the specified element name
            (unless null) and that have an attribute of the specified value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the previous elements to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the previous elements must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementsBeforeSelf(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets this element's previous sibling elements which match the specified element name
            (unless null) and that have an attribute of the specified name and value.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="elemName">The element name of the previous elements to retrieve, or NULL.</param>
            <param name="attrName">The name of the attribute that the previous elements must contain.</param>
            <param name="attrValue">The value of the attribute that the previous elements must contain.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.SetAttributeName(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Renames the attribute in this XElement that has the specified name.  An ArgumentNullException is thrown
            if the specified attribute does not exist. The only way to rename an attribute is to remove it and then add a new
            attribute with the given name.  A key feature to this function however is that the replacement attribute remains
            in the same position that the original attribute was in.
            </summary>
            <param name="elem">This element.</param>
            <param name="attrName">The original attribute name.</param>
            <param name="newAttrName">The new attribute name.</param>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.SetAttributeName(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String,System.String)">
            <summary>
            Renames the attribute in this XElement that has the specified name, and optionally replaces
            the value of the attribute.  An ArgumentNullException is thrown if the specified attribute does not exist.
            The only way to rename an attribute is to remove it and then add a new attribute with the given name.
            A key feature to this function however is that the replacement attribute remains in the same position that
            the original attribute was in.
            </summary>
            <param name="elem">This element.</param>
            <param name="attrName">The original attribute name.</param>
            <param name="newAttrName">The new attribute name.</param>
            <param name="newAttrValue">The new attribute value, or null to keep the same value.</param>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.WhereChildHasValue(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.String)">
            <summary>
            Filters this collection of XElements to those which have a child element of the
            specified name and value.<para/><para/>
            </summary>
            <param name="elems">This sequence of XElements.</param>
            <param name="childElemName">The name of the child element.</param>
            <param name="childElemValue">The value of the specified child element.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.HasElementWithValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Determines if this XElement has an element with the specified name and value.<para/><para/>
            </summary>
            <param name="elem">This element.</param>
            <param name="childElemName">The name of the child element.</param>
            <param name="childElemValue">The value of the specified child element.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementsLocal(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets elements that have the specified local tag name, disregarding namespaces.
            This is particularly useful for when an XElement must have an xmlns namespace set
            in the root, and yet one knows no other namespaces are used. In those cases, which
            happens quite frequently, ElementsLocal can be used without having to specify namespaces
            in every single LINQ to XML query.
            </summary>
            <param name="e">Element.</param>
            <param name="localName">Local tag name.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetXtensions.XMLLinq.ElementLocal(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the first element that has the specified local tag name, disregarding namespaces.
            </summary>
            <param name="e">Element</param>
            <param name="localName">Local element name.</param>
        </member>
        <member name="T:DotNetXtensions.XMLSchema">
            <summary>
            Contains XML type functions and extensions.
            </summary>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.__GetSchema(System.Xml.Linq.XElement,System.Xml.Linq.XDocument)">
            <summary>
            Generates an Xml Schema (xsd) from this XDocument or XElement, and returns the
            schema as an XDocument.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xdoc">This XDocument.</param>
            <returns>The schema as an XDocument.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.GetSchema(System.Xml.Linq.XElement)">
            <summary>
            Generates an Xml Schema (xsd) from this XElement, and returns the
            schema as an XDocument.
            </summary>
            <param name="elem">This XElement.</param>
            <returns>The schema as an XDocument.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.GetSchema(System.Xml.Linq.XDocument)">
            <summary>
            Generates an Xml Schema (xsd) from this XDocument, and returns the
            schema as an XDocument.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <returns>The schema as an XDocument.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.__Validate(System.Xml.Linq.XElement,System.Xml.Linq.XDocument,System.Xml.Linq.XElement,System.String)">
            <summary>
            Validates this XDocument or XElement against the specified schema, returning
            the error messages in the return string if it is not valid (an exception message per line),
            but null if it is valid.  Note that the XElement will be converted to an XDocument
            for the purpose of running this validation.
            </summary>
            <param name="elem">This XElement, or null.</param>
            <param name="xdoc">This XDocument, or null.</param>
            <param name="schema">The schema document in the form of an XElement.</param>
            <param name="schemaUri">The URI of the schema.</param>
            <returns>Null if validiation is successful, or the validation error messages
            within the return string if not successful.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.Validate(System.Xml.Linq.XElement,System.String)">
            <summary>
            Validates this XElement against the specified schema, returning
            the error messages in the return string if it is not valid (an exception message per line),
            but null if it is valid.  Note that for this XElement to be validated it must be (internally)
            converted to an XDocument.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="schemaUri">The URI of the schema.</param>
            <returns>Null if validiation is successful, or the validation error messages
            within the return string if not successful.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.Validate(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Validates this XDocument against the specified schema, returning
            the error messages in the return string if it is not valid (an exception message per line),
            but null if it is valid.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="schemaUri">The URI of the schema.</param>
            <returns>Null if validiation is successful, or the validation error messages
            within the return string if not successful.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.Validate(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Validates this XElement against the specified schema, returning
            the error messages in the return string if it is not valid (an exception message per line),
            but null if it is valid.  Note that for this XElement to be validated it must be (internally)
            converted to an XDocument.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="schema">The schema document in the form of an XElement.</param>
            <returns>Null if validiation is successful, or the validation error messages
            within the return string if not successful.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.Validate(System.Xml.Linq.XDocument,System.Xml.Linq.XElement)">
            <summary>
            Validates this XDocument against the specified schema, returning
            the error messages in the return string if it is not valid (an exception message per line),
            but null if it is valid.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="schema">The schema document in the form of an XElement.</param>
            <returns>Null if validiation is successful, or the validation error messages
            within the return string if not successful.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XElement,System.String)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as an XDocument.  The target type must
            be valid XML (such as XHTML).
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <returns>An XDocument containing the XSLT transformed result.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XElement,System.String,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XElement,System.String,System.String@,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as an XDocument.  The target type must
            be valid XML (such as XHTML).
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <returns>An XDocument containing the XSLT transformed result.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XDocument,System.String,System.String@)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XDocument,System.String,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransform(System.Xml.Linq.XDocument,System.String,System.String@,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as an XDocument, or null if the tranformation failed.
            The target tranformation type must be valid XML (e.g. XHTML).
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <returns>An XDocument containing the XSLT transformed result, or null if the tranformation
            failed.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XElement,System.String)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XElement,System.String,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XElement,System.String,System.String@,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XElement using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="elem">This XElement.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XDocument,System.String,System.String@)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XDocument,System.String,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="M:DotNetXtensions.XMLSchema.XslTransformData(System.Xml.Linq.XDocument,System.String,System.String@,System.Xml.Xsl.XsltSettings,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs an XSLT transformation upon this XDocument using the specified XSLT file,
            and returns the transformed result as a byte array (which will often simply contain
            UTF-8 encoded text), or null if the tranformation failed.  The target tranformation
            type could either be a valid XML type (such as XHTML) or any other transformable type,
            such as PDF.
            </summary>
            <param name="xdoc">This XDocument.</param>
            <param name="xsltPath">The URI of the XSLT file.</param>
            <param name="xsltExceptionMess">The XsltException message if the transformation fails.</param>
            <param name="xsltArgList">An XsltArgumentList object. This value can be null.</param>
            <param name="xsltSettings">An XsltSettings object. This value can be null.</param>
            <returns>A byte array containing the transformed data.</returns>
        </member>
        <member name="T:DotNetXtensions.XRegex">
            <summary>
            Regular Expression extension methods.
            </summary>
        </member>
        <member name="T:DotNetXtensions.RxPattern">
            <summary>
            An enumeration of regular expression patterns.
            </summary>
        </member>
        <member name="F:DotNetXtensions.RxPattern.Email">
            <summary>
            An email address.
            </summary>
        </member>
        <member name="F:DotNetXtensions.RxPattern.PhoneUS">
            <summary>
            A US phone number.
            </summary>
        </member>
        <member name="F:DotNetXtensions.RxPattern.SocSecNumUS">
            <summary>
            A US Social Security Number.
            </summary>
        </member>
        <member name="F:DotNetXtensions.RxPattern.WebURL">
            <summary>
            A web URL.
            </summary>
        </member>
        <member name="F:DotNetXtensions.RxPattern.ZIPCodeUS">
            <summary>
            A US Postal ZIP code.
            </summary>
        </member>
    </members>
</doc>
