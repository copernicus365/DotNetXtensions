<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>
    <VersionPrefix>3.5.0</VersionPrefix>
    <Authors>Nicholas Petersen</Authors>
    <RepositoryUrl>https://github.com/copernicus365/DotNetXtensions/tree/master/DotNetXtensions.Json</RepositoryUrl>
    <PackageProjectUrl>https://github.com/copernicus365/DotNetXtensions/tree/master/DotNetXtensions.Json</PackageProjectUrl>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>json newtonsoft-json extensions dotnet helper-functions</PackageTags>
    <PackageReleaseNotes />
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <Description>
      Some Newtonsoft.JSON helper extension methods and types (e.g. JsonConverters). Most important is the extension method on objects exposting a useful `ToJson` extension method, which allows one to serialize any object to Json with a single call, while being able to specify whether to indent, to camel-case property names, to serialize enums as strings, and etc. On the other end exposes a DeserializeJson extension method on strings and byte arrays.
      Nothing earth-shattering here, but helps those cases where you want quick and no-nonsense JSON serialization / deserialization.
    </Description>
    <NoWarn>1701;1702;1705;0159;1591;</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\DotNetXtensions\DotNetXtensions.csproj" />
  </ItemGroup>

</Project>
