<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetXtensions.TimeZones</name>
    </assembly>
    <members>
        <member name="T:DotNetXtensions.Globalization.GeoNames">
            <summary>
            Class containing geographical and national information, currently world country names and state names.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.Countries">
            <summary>
            Country names.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.States">
            <summary>
            US and Canadian state names.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.CountriesOrdered">
            <summary>
            Country names sorted. This is useful when conducting a binary search.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.StatesOrdered">
            <summary>
            US and Canadian state names ordered. This is useful when conducting a binary search.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.CountriesTopped">
            <summary>
            Country names with a few of the common countries many of us have to deal with on top.
            You can change these values (or simply never use this!) by calling SetCountriesTopped.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.CountriesDictByFullName">
            <summary>
            A dictionary of country names <i>keyed by the full country name</i>, with the abbreviation as the value.
            So this allows one to lookup the abbreviation for a country when they already have the full country name.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.StatesDictByFullName">
            <summary>
            A dictionary of state names <i>keyed by the full state name</i>, with the abbreviation as the value.
            So this allows one to lookup the abbreviation for a state when they already have the full state name.
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.CountriesDict">
            <summary>
            A dictionary of country names <i>keyed by the country abbreviation</i>, with the full country name as the value.
            So this allows one to lookup the abbreviation for a country when they already have the full name.
            <remarks>
            Information was initially based on: http://www.paladinsoftware.com/Generic/countries.htm (Nov 2013)
            </remarks>
            </summary>
        </member>
        <member name="F:DotNetXtensions.Globalization.GeoNames.StatesDict">
            <summary>
            A dictionary of state names <i>keyed by the country abbreviation</i>, with the full state name as the value.
            So this allows one to lookup the abbreviation for a state when they already have the full state name.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Globalization.GeoNames.SetCountriesTopped(System.String[])">
            <summary>
            Set the CountriesTopped field with the input topCountries on top.
            Value gotten from GetCountriesWithTheseOnTop.
            </summary>
            <param name="topCountries">The names of countries (full names or abbreviations both work, even mixed) 
            you would like to be set on top in the CountriesTopped field.</param>
        </member>
        <member name="M:DotNetXtensions.Globalization.GeoNames.GetGeoNamesEnumsCode">
            <summary>
            Gets C# code generated from the current Countries and States 
            dictionaries for making them into enums.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetXtensions.Globalization.TimeZones">
            <summary>
            TimeZone helper, allowing conversions from the common TZ ids, to .NET / Windows
            <see cref="T:System.TimeZoneInfo"/>s.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Globalization.TimeZonesX.TZId(System.TimeZoneInfo)">
            <summary>
            Gets the first TZ Id value for this TimeZoneInfo. This is an indirection 
            call to DotNetXtensions.Time.GetTZValueFromWindowsTimeZoneId.
            </summary>
            <param name="tzi">TimeZoneInfo</param>
        </member>
        <member name="M:DotNetXtensions.Globalization.TimeZonesX.TZIdValues(System.TimeZoneInfo)">
            <summary>
            Gets the all TZ id values (often there is only one) for this TimeZoneInfo. 
            This is an indirection call to DotNetXtensions.Time.GetTZValuesFromWindowsTimeZoneId.
            </summary>
            <param name="tzi">TimeZoneInfo</param>
        </member>
        <member name="T:DotNetXtensions.Globalization.TZKeyValues">
            <summary>
            Note from 2018-04: I'm not happy how this was done, a lot was done for 
            perf concerns, because most tz keys didn't have a multi-value, so 
            stuff was done to not use a collection when only the singular 
            Value property was set. However, if I had the time I would totally
            fix go through and fix this up. We could keep the perf concern but
            either: 1) keep the type readonly, then even as a struct, would be 
            way better and remove problems, or 2) make an ExtraValues property,
            instead of as is done where it looks like `Values` which serves some
            kind of seemingly messed up multi-purpose and I'm not sure correctly.
            </summary>
        </member>
        <member name="M:DotNetXtensions.Globalization.TZKeyValues.SetValues(System.String[])">
            <summary>
            This is the old logic: It basically is doing this:
            IF Value hasn't been set yet, AND if input array is not Nulle,
            then set Value to the first item in this array, and then set ExtraValues to
            any subsequent (greater than Length 1) values in input array if there are any
            (else ExtraValues will remain null). 
            OTHERWISE, i.e. if Value is already non-null, OR if input array is null or empty, 
            then just sets ExtraValues directly to this input array.
            </summary>
            <param name="value"></param>
        </member>
    </members>
</doc>
